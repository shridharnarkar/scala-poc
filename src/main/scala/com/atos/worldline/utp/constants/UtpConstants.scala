package com.atos.worldline.utp.constants

/**
 * @author a574891
 */
object UtpConstants {

  val EMPTY_STRING =""
  //Business Name
  val LENNON = "Lennon"
  //Currency types
  val LennonCurrency = "Euro"
  val EuroCurrency = "Euro"
  val SterlingCurrency = "Sterling"
  //Line Types
  val HeaderLine = "H"
  val TrailerLine = "T"
  val RecordLine = "R"
  val UnknownLine = "U"
  //Record Types
  val VRecord = "V"
  val XRecord = "X"
  val GRecord = "G"
  val HRecord = "H"
  val ZRecord = "Z"
  val UnknownRecord = "U"
  //Z Record fields
  val ZRecord_TransactionValue = "TransactionValue"
  val ZRecord_Currency = "Currency"
  val ZRecord_PassengerCharterMarker = "PassengerCharterMarker"
  val ZRecord_DefaultAudit = "DefaultAudit"
  val ZRecord_FaresCheckingMarker = "FaresCheckingMarker"
  val ZRecord_SortKey = "SortKey"
  val ZRecord_RecordType = "RecordType"
  val ZRecord_ApportionmentIndicator = "ApportionmentIndicator"
  val ZRecord_IssuingLocation = "IssuingLocation"
  val ZRecord_SellingLocation = "SellingLocation"
  val ZRecord_Origin = "Origin"
  val ZRecord_Destination = "Destination"
  val ZRecord_Route = "Route"
  val ZRecord_TicketStatus = "TicketStatus"
  val ZRecord_ApportionmentMOPBasis = "ApportionmentMOPBasis"
  val ZRecord_Product = "Product"
  val ZRecord_DiscountCode = "DiscountCode"
  val ZRecord_DiscountPercentage = "DiscountPercentage"
  val ZRecord_DateandTimeofIssue = "DateandTimeofIssue"
  val ZRecord_NumberofPeople = "NumberofPeople"
  val ZRecord_DeferredIssueIdentifier = "DeferredIssueIdentifier"
  val ZRecord_UNUSED = "UNUSED"
  val ZRecord_DateofSale = "DateofSale"
  val ZRecord_DeferredIssueType = "DeferredIssueType"
  val ZRecord_RetailItemID = "RetailItemID"
  val ZRecord_DateofTravelorSeasonStartDate = "DateofTravelorSeasonStartDate"
  val ZRecord_LostDays = "LostDays"
  val ZRecord_PeriodofValidity = "PeriodofValidity"
  val ZRecord_RetailTransactionID = "RetailTransactionID"
  val ZRecord_TicketNumber = "TicketNumber"
  val ZRecord_TransactionNumber = "TransactionNumber"
  val ZRecord_SundryTransactionNumber = "SundryTransactionNumber"
  val ZRecord_NumberofSundryItems = "NumberofSundryItems"
  val ZRecord_BankGiroCreditSerial = "BankGiroCreditSerial"
  val ZRecord_SeasonTicketEndDate = "SeasonTicketEndDate"
  val ZRecord_SeasonDateLastUsed = "SeasonDateLastUsed"
  val ZRecord_NumberofTickets = "NumberofTickets"
  val ZRecord_NumberofAdults = "NumberofAdults"
  val ZRecord_NumberofChildren = "NumberofChildren"
  val ZRecord_DateProcessed = "DateProcessed"
  val ZRecord_OriginRecordType = "OriginRecordType"
  val ZRecord_EurostarFareBasis = "EurostarFareBasis"
  val ZRecord_AccountingSundry = "AccountingSundry"
  val ZRecord_NonIssueMarker = "NonIssueMarker"
  val ZRecord_FareMethodMarker = "FareMethodMarker"
  val ZRecord_RefundMarker = "RefundMarker"
  val ZRecord_BarCodeInputMarker = "BarCodeInputMarker"
  val ZRecord_AdvanceIssueMarker = "AdvanceIssueMarker"
  val ZRecord_CrossLondonMarker = "CrossLondonMarker"
  val ZRecord_BookingMarker = "BookingMarker"
  val ZRecord_MinorMaxFareMarker = "MinorMaxFareMarker"
  val ZRecord_SystemGeneratedMarker = "SystemGeneratedMarker"
  val ZRecord_MultipleIssueMarker = "MultipleIssueMarker"
  val ZRecord_PromotionCode = "PromotionCode"
  val ZRecord_RecreatedDataMarker = "RecreatedDataMarker"
  val ZRecord_ManualInputMarker = "ManualInputMarker"
  val ZRecord_RefundValue = "RefundValue"
  val ZRecord_Filler = "Filler"
  val ZRecord_AccountablePeriod = "AccountablePeriod"
  val ZRecord_IssuingMachine = "IssuingMachine"
  val ZRecord_OperatorID = "OperatorID"
  val ZRecord_SaleNumber = "SaleNumber"
  val ZRecord_IssuingWindow = "IssuingWindow"
  val ZRecord_SellingWindow = "SellingWindow"
  val ZRecord_CreditCardAcquirer = "CreditCardAcquirer"
  val ZRecord_WarrantAccountHolder_loc_id_wah = "WarrantAccountHolder_loc_id_wah"
  val ZRecord_RunDate = "RunDate"
  val ZRecord_IssueCommissionProportion = "IssueCommissionProportion"
  val ZRecord_SellingMachineonIssue = "SellingMachineonIssue"
  val ZRecord_MatchingMarker = "MatchingMarker"
  val Y_CHAR = "Y"
  val N_CHAR = "N"
  val UTP_DATE_FORMAT_ONE = "yyyyddMM" //"yyyyddMMHHmmss"
  val UTP_DATE_FORMAT_TWO = "yyyyMMdd" //"yyyyMMddHHmmss"
  val CHILD_FARE ="CHILD-FARE"
  val ZERO = "0"
  val SPACES = ""
  val TICKET_TYPE_C = "C"
  val TICKET_TYPE_A = "A"
  val FIVE_PENCE_OR_CENTS : Double = 0.05d        //  1 Pound = 100 pence   //1 Euro = 100 cents
  //code_book->Type = Ticket Status Type
  val TICKET_STATUS_TYPE_ADULT_GROUP = "Adult Group"
  val TICKET_STATUS_TYPE_CHILD_GROUP = "Child Group"
  val TICKET_STATUS_TYPE_AAA_GROUP = "AAA Group"
  val TICKET_STATUS_TYPE_TICKET_STATUS = "Ticket Status"
  val TICKET_STATUS_TYPE_ADULT_CHILD_AAA_LINKER = "Adult Child AAA Linker"
  val TICKET_STATUS_TYPE_DISCOUNT_TICKET_STATUS_GROUP = "Discount Ticket Status Group"
  //Default Discount Product
  val DEFAULT_DISCOUNT_PRODUCT_CODE = "DEFLT"
  //code_book->Type = Product Type -> Correction Types
  val FARES_CHECKING_CORRECTION = "Fares Checking Correction"
  val DEFAULT_FARES_CHECKING_PENALTY = "Default Fares Checking Penalty"
  //code_book->Type = Product Type -> Discount Product Types
  val PASSENGERS_CHARTER_DISCOUNT = "Passengers Charter Discount"
  val DISCOUNT_CODE = "Discount Code"
  //code_book->Type = Fare Checking Results
  val FARE_CHECKING_UNDERCHARGE = "Undercharge"
  val FARE_CHECKING_OVERCHARGE = "Overcharge"
  val FARE_CHECKING_INCALCULABLE = "Incalculable"
  val FARE_CHECKING_CORRECT = "Correct"
  val FARE_CHECKING_EXCLUSION = "Exclusion"
  val FARE_CHECKING_EXCESSIVE_FARE = "Excessive Fare"
  val FARE_CHECKING_UNABLE_TO_CHECK = "Unable to Check"
  val EXCLUDED_BY_DEFAULTING = "Excluded by Defaulting"
  //code_book->Type = Suspendable Indicator
  val NON_SUSPENDABLE_SEASON_TICKET = "Non-Suspendable Season Ticket"
  val NONE = "None"
  //code_book->Type = "Advance Issue Marker"
  val ADVANCE_ISSUE = "Advance Issue"
  //code_book->Type = Deferred Issue Marker
  val ISSUE_OF_TICKET = "Issue of Ticket"
  //application_parameters->
  val UTP_FARES_CHECK_AHEAD_DAYS = "UTP Fares Check Ahead Days"
  val MAXIMUM_NON_SEASON_FARE = "Maximum Non Season Fare"
  val MAXIMUM_SEASON_FARE = "Maximum Season Fare"
  //group_function_type
  val GROUP_FUNCTION_TYPE_OWNS = "Owns"
  val GROUP_FUNCTION_TYPE_PREVIOUSLY_OWNED = "Previously Owned"
  
}